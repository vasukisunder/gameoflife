{"version":3,"sources":["App.js","index.js"],"names":["useStyles","makeStyles","theme","root","margin","spacing","typography","fontSize","createMuiTheme","palette","primary","main","blueGrey","operations","App","classes","useState","numRows","numCols","rows","i","push","Array","from","grid","setGrid","running","setRunning","runningRef","useRef","current","runSimulation","useCallback","g","produce","gridCopy","k","neighbors","forEach","x","y","newI","newK","setTimeout","id","className","style","display","flexDirection","alignItems","justifyContent","Button","size","variant","color","onClick","ThemeProvider","generateEmptyGrid","Math","random","gridTemplateColumns","boxShadow","map","col","key","newGrid","width","height","backgroundColor","undefined","border","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.201b5d60.chunk.js","sourcesContent":["import React, { useState, useCallback, useRef } from \"react\"\nimport produce from \"immer\"\nimport \"./App.css\"\nimport Button from '@material-ui/core/Button';\nimport { createMuiTheme, makeStyles, ThemeProvider } from '@material-ui/core/styles';\nimport blueGrey from '@material-ui/core/colors/blueGrey';\n\n\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    '& > *': {\n      margin: theme.spacing(1),\n    },\n    typography: {\n  \n        fontSize: 10,\n      },\n  },\n  \n}));\n\nconst theme = createMuiTheme({\n    palette: {\n      primary: {main: blueGrey[500]},\n    },\n  });\n\nconst operations = [\n    [0, 1],\n    [0, -1],\n    [1, 1],\n    [1, -1],\n    [1, 0],\n    [-1, -1],\n    [-1, 1],\n    [-1, 0]\n\n]\n\n\nexport default function App() {\n    const classes = useStyles();\n\n\n    const [numRows, setRows] = useState(20);\n    const [numCols, setCols] = useState(20);\n    \n    const [grid, setGrid] = useState(() => {\n        const rows = [];\n            for (let i = 0; i < numRows; i++){\n                rows.push(Array.from(Array(numCols), () => 0))\n            };\n            return rows\n    });\n\n    const [running, setRunning] = useState(false);\n\n    const runningRef = useRef(running);\n    runningRef.current = running;\n\n    const generateEmptyGrid = () => {\n        const rows = [];\n            for (let i = 0; i < numRows; i++){\n                rows.push(Array.from(Array(numCols), () => 0))\n            };\n            return rows\n    }\n\n \n\n    const runSimulation = useCallback(() => {\n        if (!runningRef.current) {\n            return;\n        }\n        setGrid((g) => {\n            return produce(g, gridCopy => {\n                for (let i = 0; i < numRows; i++) {\n                    for (let k = 0; k < numCols; k++) {\n                        let neighbors = 0;\n                        operations.forEach(([x,y]) => {\n                            const newI = i + x;\n                            const newK = k + y;\n                            if (newI >= 0 && newI <  numRows && newK >= 0 && newK < numCols){\n                                neighbors += g[newI][newK]\n                            }\n                        })\n                        if (neighbors < 2 || neighbors > 3) {\n                            gridCopy[i][k] = 0;\n                        } else if (g[i][k] === 0 && neighbors === 3) {\n                            gridCopy[i][k] = 1;\n                        }\n                    }\n                }\n            })\n        })\n        \n        setTimeout(runSimulation, 100)\n    }, [])\n\n    return (\n        <div id=\"main\">\n            <div id=\"left\">\n            <h1>Game Of Life</h1>\n            <p>The game of life was created by John Conway in 1970. It depicts a cellular automaton, and each cell has two states (alive or dead). To interact with the game, you can create an initial configuration and observe how it evolves over time. A cell can live or die based on its neighbors, such as through underpopulation, overpopulation, or reproduction.</p>\n            <p>Conway aimed to define an interesting and unpredictable cell automaton, with some configurations lasting a long time before dying and others going on forever. The game illustrates how complex patterns can emerge from simple rules. </p>\n            <div className={classes.root} style= {{\n               display: \"flex\",\n               flexDirection: \"row\",\n               alignItems: \"center\",\n               justifyContent: \"center\",\n               fontSize: \"0.8em\"\n           }}>\n                <Button size=\"small\" variant=\"contained\"  color=\"primary\" onClick = {() => {\n                    setRunning(!running);\n                    if(!running){\n                        runningRef.current = true;\n                        runSimulation()\n                    }\n                    \n                }}> {running ? \"stop\" : \"start\"} </Button>\n        \n                 <ThemeProvider theme={theme}>\n\n                    <Button size=\"small\" variant=\"contained\"  color=\"primary\" onClick = {() => {\n                        setGrid(generateEmptyGrid());\n                        setRunning(false)\n                    }}> clear </Button>\n                </ThemeProvider>\n\n        \n                <Button size=\"small\" variant=\"contained\"  color=\"primary\" onClick = {() => {\n                    const rows = [];\n                    for (let i = 0; i < numRows; i++){\n                        rows.push(Array.from(Array(numCols), () => Math.random() > 0.5 ? 1 : 0))\n                    };\n                    setGrid(rows)\n        \n                }}> seed </Button>\n           </div>\n            </div>\n            <div id=\"game\">\n           \n           \n            <div style={{\n                display: \"grid\",\n                gridTemplateColumns: `repeat(${numCols}, 25px)`,\n                margin: \"5%\",\n                justifyContent: \"center\",\n                boxShadow: \"0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19)\"\n            }}>\n                {grid.map((rows, i) => \n                    rows.map((col, k) => (\n                        <div   \n                            key= {`${i}-${k}`}\n                            onClick = {() => {\n                                const newGrid = produce(grid, gridCopy => {\n                                    gridCopy[i][k] = grid[i][k] ? 0 : 1;\n                                })\n                                setGrid(newGrid);\n                            }}\n                            style = {{ \n                                width: 25, \n                                height: 25, \n                                backgroundColor: grid[i][k] ? '#37474f' : undefined, \n                                border: \"solid 1px #37474f\" \n                                }}\n                        />\n                    ))\n                    )}\n            </div>\n            </div>\n        </div>\n    )\n}\n\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));"],"sourceRoot":""}